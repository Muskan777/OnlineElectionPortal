/// <reference types="node" />
export = multipart;
/**
 * @typedef {import('http').IncomingMessage} IncomingMessage
 * @typedef {import('http').IncomingHttpHeaders} IncomingHttpHeaders
 * @typedef {Object} Part
 * @property {IncomingHttpHeaders} headers
 * @property {AsyncIterable<Buffer>} body
 */
/**
 * Streaming multipart HTTP message parser
 * @param {IncomingMessage | AsyncIterable<Buffer>} source
 * @param {string} [boundary]
 * @returns {AsyncIterable<Part>}
 */
declare function multipart(source: IncomingMessage | AsyncIterable<Buffer>, boundary?: string | undefined): AsyncIterable<Part>;
declare namespace multipart {
    export { IncomingMessage, IncomingHttpHeaders, Part, PrefixPush, PrefixStream };
}
type IncomingMessage = import('http').IncomingMessage;
import { Buffer } from "buffer";
type Part = {
    headers: IncomingHttpHeaders;
    body: AsyncIterable<Buffer>;
};
type IncomingHttpHeaders = import('http').IncomingHttpHeaders;
type PrefixPush<T> = {
    push: (arg0: T) => void;
};
type PrefixStream<T> = AsyncIterable<T> & PrefixPush<T>;
//# sourceMappingURL=index.d.ts.map