export = Root;
/**
 * @typedef {AddAllContext & CatContext & GetContext & ListContext } Context
 * @typedef {import('./add-all').Context} AddAllContext
 * @typedef {import('./cat').Context} CatContext
 * @typedef {import('./get').Context} GetContext
 * @typedef {import('./ls').Context} ListContext
 * @typedef {import('ipfs-core-types/src').RootAPI} RootAPI
 * @implements {RootAPI}
 */
declare class Root implements RootAPI {
    /**
     * @param {Context} context
     */
    constructor({ preload, gcLock, pin, block, ipld, options }: Context);
    addAll: (source: import("ipfs-core-types/src/files").ImportSource, options?: import("ipfs-core-types/src/root").AddAllOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/files").UnixFSEntry>;
    add: (entry: import("ipfs-core-types/src/files").ToEntry, options?: import("ipfs-core-types/src/root").AddAllOptions | undefined) => Promise<import("ipfs-core-types/src/files").UnixFSEntry>;
    cat: (ipfsPath: import("ipfs-core-types/src/root").IPFSPath, options?: import("ipfs-core-types/src/root").CatOptions | undefined) => AsyncIterable<Uint8Array>;
    get: (ipfsPath: import("ipfs-core-types/src/root").IPFSPath, options?: import("ipfs-core-types/src/root").GetOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/files").IPFSEntry>;
    ls: (ipfsPath: import("ipfs-core-types/src/root").IPFSPath, options?: import("ipfs-core-types/src/root").ListOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/files").IPFSEntry>;
}
declare namespace Root {
    export { Context, AddAllContext, CatContext, GetContext, ListContext, RootAPI };
}
type Context = createAddAllAPI.Context & createCatAPI.Context & createGetAPI.Context & createLsAPI.Context;
type AddAllContext = {
    block: import("./block");
    gcLock: import("./gc-lock").RWLock;
    preload: ((() => void) & {
        start: () => void;
        stop: () => void;
    }) | {
        (path: import("ipfs-core-types/src/root").IPFSPath): Promise<void>;
        start(): void;
        stop(): void;
    };
    pin: import("./pin");
    options?: import("ipfs-core-types/src/root").ShardingOptions | undefined;
};
type CatContext = {
    ipld: import("ipfs-core-types/src/ipld").IPLD<any>;
    preload: ((() => void) & {
        start: () => void;
        stop: () => void;
    }) | {
        (path: import("ipfs-core-types/src/root").IPFSPath): Promise<void>;
        start(): void;
        stop(): void;
    };
};
type GetContext = {
    ipld: import("ipfs-core-types/src/ipld").IPLD<any>;
    preload: ((() => void) & {
        start: () => void;
        stop: () => void;
    }) | {
        (path: import("ipfs-core-types/src/root").IPFSPath): Promise<void>;
        start(): void;
        stop(): void;
    };
};
type ListContext = {
    ipld: import("ipfs-core-types/src/ipld").IPLD<any>;
    preload: ((() => void) & {
        start: () => void;
        stop: () => void;
    }) | {
        (path: import("ipfs-core-types/src/root").IPFSPath): Promise<void>;
        start(): void;
        stop(): void;
    };
};
type RootAPI = import("ipfs-core-types").RootAPI;
import createAddAllAPI = require("./add-all");
import createCatAPI = require("./cat");
import createGetAPI = require("./get");
import createLsAPI = require("./ls");
//# sourceMappingURL=root.d.ts.map