export = IPNSAPI;
declare class IPNSAPI {
    /**
     * @param {Object} options
     * @param {string} [options.pass]
     * @param {boolean} [options.offline]
     * @param {LibP2POptions} [options.libp2p]
     * @param {ExperimentalOptions} [options.EXPERIMENTAL]
     */
    constructor(options?: {
        pass: string | undefined;
        offline: boolean | undefined;
        libp2p: LibP2POptions | undefined;
        EXPERIMENTAL: ExperimentalOptions | undefined;
    });
    options: {
        pass?: string | undefined;
        offline?: boolean | undefined;
        libp2p?: LibP2POptions | undefined;
        EXPERIMENTAL?: ExperimentalOptions | undefined;
    };
    offline: IPNS | null;
    online: IPNS | null;
    getIPNS(): IPNS;
    get routing(): any;
    /**
     * Activates IPNS subsystem in an ofline mode. If it was started once already
     * it will throw an exception.
     *
     * This is primarily used for offline ipns modifications, such as the
     * initializeKeyspace feature.
     *
     * @param {Object} config
     * @param {import('.').Repo} config.repo
     * @param {import('.').PeerId} config.peerId
     * @param {import('.').Keychain} config.keychain
     */
    startOffline({ repo, peerId, keychain }: {
        repo: import('.').Repo;
        peerId: import('.').PeerId;
        keychain: import('.').Keychain;
    }): void;
    /**
     * @param {Object} config
     * @param {import('.').LibP2P} config.libp2p
     * @param {import('.').Repo} config.repo
     * @param {import('.').PeerId} config.peerId
     * @param {import('.').Keychain} config.keychain
     */
    startOnline({ libp2p, repo, peerId, keychain }: {
        libp2p: import('.').LibP2P;
        repo: import('.').Repo;
        peerId: import('.').PeerId;
        keychain: import('.').Keychain;
    }): Promise<void>;
    stop(): Promise<void>;
    publish(privKey: any, value: any, lifetime: any): Promise<{
        name: string;
        value: any;
    }>;
    resolve(name: any, options: any): Promise<any>;
    initializeKeyspace(privKey: any, value: any): Promise<{
        name: string;
        value: any;
    }>;
}
declare namespace IPNSAPI {
    export { ExperimentalOptions, LibP2POptions, DHTConfig };
}
type LibP2POptions = {
    config?: DHTConfig | undefined;
};
type ExperimentalOptions = {
    ipnsPubsub?: boolean | undefined;
};
import IPNS = require("../ipns");
type DHTConfig = {
    enabled?: boolean | undefined;
};
//# sourceMappingURL=ipns.d.ts.map