declare function _exports({ ipld, name }: {
    ipld: import('.').IPLD;
    name: import('.').Name;
}): (path: string, opts?: ResolveOptions | undefined) => Promise<string>;
export = _exports;
export type ResolveOptions = ResolveSettings & import("ipfs-core-types").AbortOptions;
export type ResolveSettings = {
    /**
     * - Resolve until result is an IPFS name.
     */
    recursive?: boolean | undefined;
    /**
     * - Multibase codec name the CID in the resolved path will be encoded with.
     */
    cidBase?: "0" | "base58btc" | "identity" | "base2" | "base8" | "base10" | "base16" | "base16upper" | "base32hex" | "base32hexupper" | "base32hexpad" | "base32hexpadupper" | "base32" | "base32upper" | "base32pad" | "base32padupper" | "base32z" | "base36" | "base36upper" | "base58flickr" | "base64" | "base64pad" | "base64url" | "base64urlpad" | "\0" | "7" | "9" | "f" | "F" | "v" | "V" | "t" | "T" | "b" | "B" | "c" | "C" | "h" | "k" | "K" | "z" | "Z" | "m" | "M" | "u" | "U" | undefined;
};
export type AbortOptions = import("ipfs-core-types").AbortOptions;
//# sourceMappingURL=resolve.d.ts.map