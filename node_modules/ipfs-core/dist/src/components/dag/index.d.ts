export = DagAPI;
declare class DagAPI {
    /**
     * Creates a reader part of the DAG API. This allows other APIs that require
     * reader parts of the DAG API to be instantiated before components required
     * by writer end are.
     *
     * @param {ReaderConfig} config
     * @returns {DagReader}
     */
    static reader(config: ReaderConfig): DagReader;
    /**
     * @param {Object} config
     * @param {IPLD} config.ipld
     * @param {Preload} config.preload
     * @param {Pin} config.pin
     * @param {GCLock} config.gcLock
     * @param {DagReader} config.dagReader
     */
    constructor({ ipld, pin, preload, gcLock, dagReader }: {
        ipld: IPLD;
        preload: Preload;
        pin: Pin;
        gcLock: GCLock;
        dagReader: DagReader;
    });
    get: (ipfsPath: import("ipfs-core-types/src/root").IPFSPath, options?: (createGet.GetOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<createGet.DagEntry>;
    resolve: (ipfsPath: import("ipfs-core-types/src/root").IPFSPath, options?: (createResolve.ResolveOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<createResolve.ResolveResult>;
    tree: (ipfsPath: import("cids"), options?: (createTree.TreeOptions & import("ipfs-core-types").AbortOptions) | undefined) => AsyncIterable<string>;
    put: (dagNode: any, options?: (createPut.WithCID & createPut.OtherPutOptions & import("ipfs-core-types").AbortOptions) | (createPut.WithCIDOptions & createPut.OtherPutOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<import("cids")>;
}
declare namespace DagAPI {
    export { DagReader, ReaderConfig, IPLD, Preload, Pin, GCLock, CID, AbortOptions };
}
import createGet = require("./get");
import createResolve = require("./resolve");
import createTree = require("./tree");
import createPut = require("./put");
type ReaderConfig = {
    ipld: IPLD;
    preload: Preload;
};
type DagReader = {
    get: ReturnType<typeof createGet>;
    resolve: ReturnType<typeof createResolve>;
    tree: ReturnType<typeof createTree>;
};
type IPLD = import("ipfs-core-types/src/ipld").IPLD<any>;
type Preload = ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: import("ipfs-core-types/src/root").IPFSPath): Promise<void>;
    start(): void;
    stop(): void;
};
type Pin = import("../pin");
type GCLock = {
    readLock: () => Promise<import("../gc-lock").Lock>;
    writeLock: () => Promise<import("../gc-lock").Lock>;
};
type CID = import("cids");
type AbortOptions = import("ipfs-core-types").AbortOptions;
//# sourceMappingURL=index.d.ts.map