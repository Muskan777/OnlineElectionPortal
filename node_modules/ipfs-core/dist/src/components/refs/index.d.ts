declare function _exports({ ipld, resolve, preload }: {
    ipld: import('..').IPLD;
    resolve: import('..').Resolve;
    preload: import('..').Preload;
}): (ipfsPath: import("ipfs-core-types/src/root").IPFSPath, options?: (RefsOptions & import("ipfs-core-types").AbortOptions) | undefined) => AsyncIterable<RefResult>;
declare namespace _exports {
    export { Format };
    export { RefsOptions, RefResult, AbortOptions, Repo };
}
export = _exports;
export type RefsOptions = {
    /**
     * - Recursively list references of child nodes
     */
    recursive?: boolean | undefined;
    /**
     * - Omit duplicate references from output
     */
    unique?: boolean | undefined;
    /**
     * - Output edges with given format. Available tokens: `<src>`, `<dst>`, `<linkname>`
     */
    format?: string | undefined;
    /**
     * - output references in edge format: `"<src> -> <dst>"`
     */
    edges?: boolean | undefined;
    /**
     * - only for recursive refs, limits fetch and listing to the given depth
     */
    maxDepth?: number | undefined;
};
export type RefResult = {
    ref: string;
    err?: null | undefined;
} | {
    ref?: undefined;
    err: Error;
};
export type AbortOptions = import("ipfs-core-types").AbortOptions;
export type Repo = import("ipfs-core-types/src/repo").Repo<import("../config").IPFSConfig>;
declare namespace Format {
    const _default: string;
    export { _default as default };
    export const edges: string;
}
//# sourceMappingURL=index.d.ts.map