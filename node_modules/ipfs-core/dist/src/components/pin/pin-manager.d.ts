export = PinManager;
declare class PinManager {
    /**
     * Throws an error if the pin type is invalid
     *
     * @param {any} type
     * @returns {type is PinType}
     */
    static checkPinType(type: any): type is PinType;
    /**
     * @param {Object} config
     * @param {import('.').Repo} config.repo
     * @param {import('.').DagReader} config.dagReader
     */
    constructor({ repo, dagReader }: {
        repo: import('.').Repo;
        dagReader: import('.').DagReader;
    });
    repo: import("ipfs-core-types/src/repo").Repo<import("../config").IPFSConfig>;
    dag: import("../dag").DagReader;
    log: debug.Debugger;
    directPins: Set<any>;
    recursivePins: Set<any>;
    /**
     * @private
     * @param {CID} cid
     * @param {Object} options
     * @param {boolean} [options.preload]
     */
    private _walkDag;
    /**
     * @param {CID} cid
     * @param {PinOptions & AbortOptions} [options]
     * @returns {Promise<void>}
     */
    pinDirectly(cid: CID, options?: (PinOptions & import("ipfs-core-types").AbortOptions) | undefined): Promise<void>;
    /**
     * @param {CID} cid
     * @param {AbortOptions} [options]
     * @returns {Promise<void>}
     */
    unpin(cid: CID, options?: import("ipfs-core-types").AbortOptions | undefined): Promise<void>;
    /**
     * @param {CID} cid
     * @param {PreloadOptions & PinOptions & AbortOptions} [options]
     * @returns {Promise<void>}
     */
    pinRecursively(cid: CID, options?: (PreloadOptions & PinOptions & import("ipfs-core-types").AbortOptions) | undefined): Promise<void>;
    /**
     * @param {AbortOptions} [options]
     * @returns {AsyncIterable<{ cid: CID, metadata: any }>}
     */
    directKeys(options?: import("ipfs-core-types").AbortOptions | undefined): AsyncIterable<{
        cid: CID;
        metadata: any;
    }>;
    /**
     * @param {AbortOptions} [options]
     * @returns {AsyncIterable<{ cid: CID, metadata: any }>}
     */
    recursiveKeys(options?: import("ipfs-core-types").AbortOptions | undefined): AsyncIterable<{
        cid: CID;
        metadata: any;
    }>;
    /**
     * @param {Object} options
     * @param {boolean} [options.preload]
     */
    indirectKeys({ preload }: {
        preload?: boolean | undefined;
    }): AsyncGenerator<any, void, unknown>;
    /**
     * @param {CID} cid
     * @param {PinQueryType|PinQueryType[]} types
     * @param {AbortOptions} [options]
     */
    isPinnedWithType(cid: CID, types: PinQueryType | PinQueryType[], options?: import("ipfs-core-types").AbortOptions | undefined): Promise<{
        cid: CID;
        pinned: boolean;
        reason: "direct" | "recursive";
        metadata: any;
        parent?: undefined;
    } | {
        cid: CID;
        pinned: boolean;
        reason: "indirect";
        parent: any;
        metadata?: undefined;
    } | {
        cid: CID;
        pinned: boolean;
        reason?: undefined;
        metadata?: undefined;
        parent?: undefined;
    }>;
    /**
     * @param {CID} cid
     * @param {PreloadOptions & AbortOptions} options
     */
    fetchCompleteDag(cid: CID, options: PreloadOptions & AbortOptions): Promise<void>;
}
declare namespace PinManager {
    export { PinTypes, PinType, PinQueryType, PinOptions, PreloadOptions, AbortOptions };
}
import debug = require("debug");
import CID = require("cids");
type PinOptions = {
    metadata?: any;
};
type PreloadOptions = {
    preload?: boolean | undefined;
};
type PinQueryType = "direct" | "recursive" | "indirect" | "all";
type AbortOptions = import("ipfs-core-types").AbortOptions;
type PinType = "direct" | "recursive" | "indirect";
declare namespace PinTypes {
    const direct: 'direct';
    const recursive: 'recursive';
    const indirect: 'indirect';
    const all: 'all';
}
//# sourceMappingURL=pin-manager.d.ts.map