export = PinAPI;
declare class PinAPI {
    /**
     * @param {Object} config
     * @param {GCLock} config.gcLock
     * @param {DagReader} config.dagReader
     * @param {PinManager} config.pinManager
     */
    constructor({ gcLock, dagReader, pinManager }: {
        gcLock: GCLock;
        dagReader: DagReader;
        pinManager: PinManager;
    });
    addAll: (source: import("ipfs-core-utils/src/pins/normalise-input").Source, options?: createAddAll.AddOptions | undefined) => AsyncIterable<import("cids")>;
    add: (path: import("ipfs-core-types/src/root").IPFSPath, options?: (createAdd.AddOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<import("cids")>;
    rmAll: (source: import("ipfs-core-utils/src/pins/normalise-input").Source, _options?: import("ipfs-core-types").AbortOptions | undefined) => AsyncIterable<import("cids")>;
    rm: (path: import("ipfs-core-types/src/root").IPFSPath, options?: createRm.RmOptions | undefined) => Promise<import("cids")>;
    ls: (options?: createLs.LsOptions | undefined) => AsyncIterable<createLs.LsEntry>;
}
declare namespace PinAPI {
    export { Repo, GCLock, DagReader, PinManager, AbortOptions, CID };
}
import createAddAll = require("./add-all");
import createAdd = require("./add");
import createRm = require("./rm");
import createLs = require("./ls");
type GCLock = {
    readLock: () => Promise<import("../gc-lock").Lock>;
    writeLock: () => Promise<import("../gc-lock").Lock>;
};
type DagReader = {
    get: (ipfsPath: import("ipfs-core-types/src/root").IPFSPath, options?: (import("../dag/get").GetOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<import("../dag/get").DagEntry>;
    resolve: (ipfsPath: import("ipfs-core-types/src/root").IPFSPath, options?: (import("../dag/resolve").ResolveOptions & import("ipfs-core-types").AbortOptions) | undefined) => Promise<import("../dag/resolve").ResolveResult>;
    tree: (ipfsPath: import("cids"), options?: (import("../dag/tree").TreeOptions & import("ipfs-core-types").AbortOptions) | undefined) => AsyncIterable<string>;
};
type PinManager = import("./pin-manager");
type Repo = import("ipfs-core-types/src/repo").Repo<import("../config").IPFSConfig>;
type AbortOptions = import("ipfs-core-types").AbortOptions;
type CID = import("cids");
//# sourceMappingURL=index.d.ts.map