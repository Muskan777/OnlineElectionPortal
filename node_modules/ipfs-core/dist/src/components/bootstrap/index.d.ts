export = BootstrapAPI;
declare class BootstrapAPI {
    /**
     * @param {Object} config
     * @param {Repo} config.repo
     */
    constructor({ repo }: {
        repo: Repo;
    });
    add: (multiaddr: import("multiaddr"), options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("./utils").Peers>;
    list: (options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("./utils").Peers>;
    rm: (multiaddr: import("multiaddr"), options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("./utils").Peers>;
    clear: (options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("./utils").Peers>;
    reset: (options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("./utils").Peers>;
}
declare namespace BootstrapAPI {
    export { Repo, AbortOptions, CID, Multiaddr };
}
type Repo = import("ipfs-core-types/src/repo").Repo<import("../config").IPFSConfig>;
type AbortOptions = import("ipfs-core-types").AbortOptions;
type CID = import("cids");
type Multiaddr = import("multiaddr");
//# sourceMappingURL=index.d.ts.map