export = ObjectPatchAPI;
declare class ObjectPatchAPI {
    /**
     * @param {Object} config
     * @param {IPLD} config.ipld
     * @param {Preload} config.preload
     * @param {GCLock} config.gcLock
     */
    constructor({ ipld, preload, gcLock }: {
        ipld: IPLD;
        preload: Preload;
        gcLock: GCLock;
    });
    addLink: (multihash?: any, link?: any, options?: any) => Promise<import("cids")>;
    appendData: (multihash?: any, data?: any, options?: any) => Promise<import("cids")>;
    rmLink: (multihash?: any, linkRef?: any, options?: any) => Promise<import("cids")>;
    setData: (multihash?: any, data?: any, options?: any) => Promise<import("cids")>;
}
declare namespace ObjectPatchAPI {
    export { IPLD, Preload, GCLock, CID, AbortOptions };
}
type IPLD = import("ipfs-core-types/src/ipld").IPLD<any>;
type Preload = ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: import("ipfs-core-types/src/root").IPFSPath): Promise<void>;
    start(): void;
    stop(): void;
};
type GCLock = {
    readLock: () => Promise<import("../../gc-lock").Lock>;
    writeLock: () => Promise<import("../../gc-lock").Lock>;
};
type CID = import("cids");
type AbortOptions = import("ipfs-core-types").AbortOptions;
//# sourceMappingURL=index.d.ts.map