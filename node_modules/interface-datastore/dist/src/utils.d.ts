export type PromiseOrValue<T> = import("./types").Await<T>;
export type AnyIterable<T> = import("./types").AwaitIterable<T>;
/**
 *
 * @template T,O
 * @param {AsyncIterable<T> | Iterable<T>} iterable
 * @param {(item: T) => O} mapper
 * @returns {AsyncIterable<O>}
 */
export function map<T, O>(iterable: AsyncIterable<T> | Iterable<T>, mapper: (item: T) => O): AsyncIterable<O>;
/**
 *
 * @template T
 * @param {AsyncIterable<T> | Iterable<T>} iterable
 * @param {number} n
 * @returns {AsyncIterable<T>}
 */
export function take<T>(iterable: AsyncIterable<T> | Iterable<T>, n: number): AsyncIterable<T>;
/**
 * Sort All
 *
 * @template T
 * @param {AnyIterable<T>} iterable
 * @param {(items: T[]) => PromiseOrValue<T[]>} sorter
 * @returns {AsyncIterable<T>}
 */
export function sortAll<T>(iterable: AnyIterable<T>, sorter: (items: T[]) => PromiseOrValue<T[]>): AsyncIterable<T>;
/**
 * Filter
 *
 * @template T
 * @param {AnyIterable<T>} iterable
 * @param {(item: T) => PromiseOrValue<boolean>} filterer
 * @returns {AsyncIterable<T>}
 */
export function filter<T>(iterable: AnyIterable<T>, filterer: (item: T) => PromiseOrValue<boolean>): AsyncIterable<T>;
/**
 * @template T
 * @typedef {import("./types").Await<T>} PromiseOrValue
 */
/**
 * @template T
 * @typedef {import("./types").AwaitIterable<T>} AnyIterable
 */
export const utf8Encoder: TextEncoder;
export const utf8Decoder: TextDecoder;
import tempdir = require("ipfs-utils/src/temp-dir");
/**
 * @param {string} s
 * @param {string} r
 */
export function replaceStartWith(s: string, r: string): string;
export { tempdir as tmpdir };
//# sourceMappingURL=utils.d.ts.map